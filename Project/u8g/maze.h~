//////////////////////////////////////////////////////////////////////////////
//////////////////////////Labyrinth///////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

extern uint16_t wallsensor_v_l;
extern uint16_t wallsensor_v_l_raw;
extern uint16_t wallsensor_v_r;
extern uint16_t wallsensor_v_r_raw;
extern uint16_t wallsensor_h_l;
extern uint16_t wallsensor_h_l_raw;
extern uint16_t wallsensor_h_r;
extern uint16_t wallsensor_h_r_raw;
extern uint16_t wallsensor_v;
extern uint16_t wallsensor_v_raw;
extern uint16_t wallsensor_h;
extern uint16_t wallsensor_h_raw;

extern int16_t pwr_left;
extern int16_t pwr_right;

extern uint16_t displayvar[3];

/////////////////////////////////////////////////////////////////////////////

#define K_ALIGN 1
#define MAXSPEED 200
int16_t steer_align = 0;
int16_t e_align = 0;

////////////////////////////////////////////////////////////////////////////////

void maze_align(void)
{
	if(wallsensor_v_r < wallsensor_v_l) //Welcher Sensor ist nÃ¤her an Wand?
	{
		e_align = 0 - (wallsensor_v_r - wallsensor_h_r);
		displayvar[1] = 0;
	}
	else
	{
		e_align = 0 - (wallsensor_v_l - wallsensor_h_l); //Abweichung
		displayvar[1] = 1;
	}

	displayvar[1] = 2;//wallsensor_v_r;
	displayvar[2] = wallsensor_v_l;

	steer_align = K_ALIGN * e_align;

	displayvar[0] = steer_align;

	pwr_left = (steer_align);
	if(pwr_left > MAXSPEED)   {
	 	pwr_left = MAXSPEED;		}
	if(pwr_left < -MAXSPEED)	{
		pwr_left  = -MAXSPEED;	}

	pwr_right = (MAXSPEED-steer_align); 
	if(pwr_right > MAXSPEED)	{
		pwr_right = MAXSPEED;		}
	if(pwr_right < -MAXSPEED)	{
		pwr_right  = -MAXSPEED;	}
}
